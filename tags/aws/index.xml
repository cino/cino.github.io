<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aws on Cino</title><link>https://cino.io/tags/aws/</link><description>Recent content in Aws on Cino</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 17 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cino.io/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Private API Gateway with DNS</title><link>https://cino.io/2024/private-api-gateway-with-dns/</link><pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate><guid>https://cino.io/2024/private-api-gateway-with-dns/</guid><description>&lt;p>At PostNL we are building most of our applications with &lt;a href="https://medium.com/postnl-engineering/business-overview-f7c8d8ebee2c">Serverless&lt;/a> in mind, let me rephrase that, we build all our applications within our own landing zone with Serverless only. There is no option to deploy any kind of EC2 and if you need containers you&amp;rsquo;d be running them on Fargate only.&lt;/p>
&lt;p>Given that, we are using quite a bunch of API Gateways in the projects I&amp;rsquo;m working on. While PostNL is also a big corporate company we have a strong focus on security and compliance, and that&amp;rsquo;s why we are building our applications &lt;strong>Private first&lt;/strong>. When there is no need to be public, it shouldn&amp;rsquo;t be.&lt;/p></description></item><item><title>AWS CloudShell in your own vpc</title><link>https://cino.io/2024/aws-cloudshell-in-your-own-vpc/</link><pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate><guid>https://cino.io/2024/aws-cloudshell-in-your-own-vpc/</guid><description>&lt;p>Until recently, I was completely unaware of &lt;a href="https://aws.amazon.com/cloudshell/">AWS CloudShell&lt;/a>, and I&amp;rsquo;m glad I finally decided to give it a try. CloudShell provides a shell environment right in your browser, and to my surprise, you can start an instance within your own VPC!&lt;/p></description></item><item><title>Avoiding CloudFormation Stack Outputs</title><link>https://cino.io/2024/avoid-cloudformation-stack-outputs/</link><pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate><guid>https://cino.io/2024/avoid-cloudformation-stack-outputs/</guid><description>&lt;p>Recently I&amp;rsquo;ve been working on a new project where we created many resources in a lot of different stacks. A feature of CloudFormation is that you can output values from your stack, which is great for referencing resources in other stacks. However, while there is a use-case for this, I&amp;rsquo;ve found that it&amp;rsquo;s better to avoid using these outputs and instead use SSM parameters.&lt;/p></description></item><item><title>Multiple ways to retrieve SSM parameters in AWS CDK</title><link>https://cino.io/2024/multiple-ways-to-retrieve-ssm-parameters-cdk/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><guid>https://cino.io/2024/multiple-ways-to-retrieve-ssm-parameters-cdk/</guid><description>&lt;p>When working with AWS CDK and using SSM Parameters to store information in between stacks there are multiple ways to retrieve the value, with both advantages and disadvantages. In this post, I&amp;rsquo;ll go over the different ways to retrieve SSM parameters in AWS CDK and when to use them.&lt;/p></description></item><item><title>AWS Parameter Store vs AWS Secrets</title><link>https://cino.io/2023/aws-parameter-store-vs-aws-secrets/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://cino.io/2023/aws-parameter-store-vs-aws-secrets/</guid><description>&lt;p>Recently I&amp;rsquo;ve been using AWS Secrets to retrieve API keys which are needed to access external API&amp;rsquo;s, however, this turned out to be a more expensive service than we initially thought when starting.&lt;/p></description></item><item><title>AWS Learning badge assignments</title><link>https://cino.io/2023/aws-learning-badge-assignments/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://cino.io/2023/aws-learning-badge-assignments/</guid><description>&lt;p>Besides the AWS Certification program, there are also the newer AWS Learning skill badges. A new-ish way of learning the skills necessary to work on the aws platform and illustrate your knowledge. These are like the certifications except they are &lt;strong>not&lt;/strong> certifications of some kind and you can take exams to receive the &amp;ldquo;Skill badge&amp;rdquo;, this is all for free and is here to help you. I finished them all and wanted to highlight each of them, and how I experienced each of the exams.&lt;/p></description></item><item><title>Limiting AWS Lambda's access to Log Groups</title><link>https://cino.io/2022/limiting-aws-lambdas-access-to-log-groups/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://cino.io/2022/limiting-aws-lambdas-access-to-log-groups/</guid><description>&lt;p>About a year ago I asked the question on &lt;a href="https://www.reddit.com/r/aws/comments/o3fbge/is_awslambdabasicexecutionrole_not_way_too_open/" target="_blank">Reddit&lt;/a> what people thought of the default Lambda role called &amp;ldquo;AWSLambdaBasicExecutionRole&amp;rdquo; and why I thought it was way too open to be a default.&lt;/p>
&lt;p>To this day I still think this role shouldn&amp;rsquo;t be used at all, but rather be deleted by Amazon itself. While I agree that Amazon wants people to get started as quickly as possible it is not in line with the least access principle. For this reason, I always define the role myself, for starters only allowing the Lambda function to write to its own CloudWatch Log Group. There is no reason for the Lambda function to be able to write to log groups of other services rather than its own.&lt;/p></description></item><item><title>Building a Serverless Kanban Board</title><link>https://cino.io/2022/building-a-serverless-kanban-board/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://cino.io/2022/building-a-serverless-kanban-board/</guid><description>&lt;p>&lt;strong>Update 18/01/2023: Let&amp;rsquo;s assume this is not gonna happen anymore&lt;/strong>&lt;/p>
&lt;p>As the title suggests I&amp;rsquo;m planning on building a Serverless Kanban Board to improve my personal Typescript skills in both the front and back end. Furthermore, the whole project will be set up while using Amazon Web Services (of course ðŸ˜‰)&lt;/p>
&lt;p>I thought it would be fun to build something for practice and also have some personal projects on my GitHub page that display the latest techniques I&amp;rsquo;m working with and as a bonus get some material I can write about on the website!&lt;/p></description></item><item><title>Static website distribution with AWS CloudFront</title><link>https://cino.io/2022/static-website-distribution-with-aws-cloudfront/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://cino.io/2022/static-website-distribution-with-aws-cloudfront/</guid><description>&lt;p>Having only written about PHP and Servers in the past I am making the switch to Serverless. This has been a long-time wish for me and finally realized this in a personal but also professional environment. That being said, I plan on writing a lot of new content on the blog purely around setting up applications with a serverless mindset, built with AWS CDK (AWS Cloud Development Kit). I will include diagrams and/or flowcharts to explain what is happening and of course, include the source code in a public GitHub repository.&lt;/p>
&lt;p>The bigger goal for me is to develop a proper application on nothing but serverless services from Amazon to train my skillset and also share the process that I went through.&lt;/p></description></item></channel></rss>